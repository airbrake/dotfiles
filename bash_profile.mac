# TODO: combine the common parts of bash_profile.linux and bash_profile.mac and only have the small differences in each

[[ -f /etc/profile ]] && . /etc/profile
[[ -f ~/.aws.sh ]] && . ~/.aws.sh
export PATH=$HOME/bin:$PATH
export EDITOR="/usr/bin/vim"
export LSCOLORS="cxgxcbdbdxegeddxdxcxcx"
export HISTFILESIZE=1048576

function find_git_branch {
    local dir=. head
    until [ "$dir" -ef / ]; do
        if [ -f "$dir/.git/HEAD" ]; then
            head=$(< "$dir/.git/HEAD")
            if [[ $head == ref:\ refs/heads/* ]]; then
                git_branch="${head#*/*/}"
            elif [[ $head != '' ]]; then
                git_branch='(detached)'
            else
                git_branch='(unknown)'
            fi

            # requires the following .gitconfig alias:
            # unpushed = !GIT_CURRENT_BRANCH=$(git name-rev --name-only HEAD) && git log origin/$GIT_CURRENT_BRANCH..$GIT_CURRENT_BRANCH --oneline
            if [[ -n $(git branch   2> /dev/null) ]] && [[ -n $(git unpushed 2> /dev/null) ]]; then
                git_branch="${git_branch}(`git unpushed | wc -l | tr -d ' \n'`)"
            fi

            if [[ $(git status 2> /dev/null | tail -n1) != *"working directory clean"* ]]; then
                git_branch="${git_branch}*"
            fi

            git_branch="$git_branch "
            return
        fi
        dir="../$dir"
    done
    git_branch=''
}
function munge_path {
    if [ -n "`which ruby 2>/dev/null`" ]; then
        munged_path=`ruby -e "y='$PWD'.sub('$HOME','~');x='';p=y.split('/');x+='.../' if p.length > 4; x+=p[[0,p.length-4].max,p.length].join('/');x+='/' if p.length==0;if x.length < y.length then print x; else print y; end;"`
        # TODO: rewrite this to not use ruby.  hints:
        # echo $name | egrep -o '/' | wc -w
        # echo $name | cut -d '/' -f 5-7
    else
        munged_path=$PWD
        [[ "$munged_path" =~ ^"$HOME"(/|$) ]] && munged_path="~${name#$HOME}"
    fi
}


function go {
    ssh -oConnectTimeout=1 -oUser=ec2-user $* || ssh -oConnectTimeout=1 -oUser=ubuntu $*
}

function goo {
    while true; do date;go $1 && return; sleep 1; done
}

function gooo {
    while true; do date;go $1; sleep 1; done
}

function goi {
    ip=`echo $1 | egrep -o '[0-9]+-[0-9]+-[0-9]+-[0-9]+' | sed -e 's/-/./g'`
    echo "Connecting to ip $ip"
    go $ip
}

# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
        . "$HOME/.bashrc"
    fi
fi

# colors found at http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
# ref: http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html
    RS="\[\033[0m\]"    # reset
BRANCH="\[\033[1;34m\]"
    FG="\[\033[0;31m\]"
   FGB="\[\033[1;31m\]"
if [ "$USER" = "root" ]; then
    SEP='#'
else
    SEP='$'
fi
PS1="${FGB}{${BRANCH}\$git_branch${FGB}\u@\h:${FG}\w${FGB}}${SEP}${RS} "
PROMPT_COMMAND='echo -ne "\033]0;$git_branch$USER@$HOSTNAME:$munged_path\007"'
PROMPT_COMMAND="munge_path; find_git_branch; $PROMPT_COMMAND"

alias ls="ls -GF"
alias sl="ls"
alias l="ls -al"
alias ll="ls -alhF"
[[ -n "`which vim 2>/dev/null`" ]] && alias vi="vim" || echo "Warning: vim is not installed.  This may cause sadness."

alias grep="egrep"
alias egrep="egrep --color"
# This is a hack so that things like "sudo vi" will evaluate as "sudo vim".
# Otherwise, bash would only evaluate the alias for sudo (if any), not whatever came after it.
alias sudo="sudo "

alias fuck='sudo $(history -p \!\!)'
alias ffs='sudo $(history -p \!\!)'

[[ -s "$HOME/.bash_custom" ]] && source "$HOME/.bash_custom"
[[ -s "/usr/local/rvm/scripts/rvm" ]] && source "/usr/local/rvm/scripts/rvm"
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

### Added by the Heroku Toolbelt
[[ -d "/usr/local/heroku/bin" ]] && export PATH="/usr/local/heroku/bin:$PATH"

#alias fixws="wmctrl -R Wireshark -e 0,100,300,1600,1000"
alias fixws="wmctrl -R Wireshark -e 0,1000,1200,1600,1000"

# MacPorts Installer addition
[[ -d "/opt/local/bin" ]] && export PATH="/opt/local/sbin:$PATH"
[[ -d "/opt/local/sbin" ]] && export PATH="/opt/local/bin:$PATH"

ssh-add $HOME/.ssh/*pem >/dev/null 2>&1
